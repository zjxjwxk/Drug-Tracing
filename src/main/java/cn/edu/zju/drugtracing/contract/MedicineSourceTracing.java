package cn.edu.zju.drugtracing.contract;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes3;
import org.web3j.abi.datatypes.generated.Bytes9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class MedicineSourceTracing extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50613f82806100206000396000f3006080604052600436106101065763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630114fc8c811461010b578063122e1330146101415780631325666f14610176578063194f1023146101985780632cba6e9d146101b857806335ba06b2146101d857806340759951146101fb57806346bf91971461021b5780635946718c1461023b5780636044a1301461025b578063737087701461027b5780637a9e5e4b1461029f5780637ee454cb146102bf57806397a80873146102e3578063aef0b40314610303578063bc8a234514610334578063bf33afa514610349578063f8e471e414610369578063fe9db22114610389575b600080fd5b34801561011757600080fd5b5061012b610126366004612a41565b6103a9565b6040516101389190613cc5565b60405180910390f35b34801561014d57600080fd5b5061016161015c366004612b37565b61046a565b60405161013899989796959493929190613d42565b34801561018257600080fd5b50610196610191366004612a5f565b610a91565b005b3480156101a457600080fd5b506101966101b3366004612b55565b610c37565b3480156101c457600080fd5b506101966101d33660046129c4565b610dc4565b3480156101e457600080fd5b506101ed610fa4565b604051610138929190613c25565b34801561020757600080fd5b50610196610216366004612be6565b61110c565b34801561022757600080fd5b50610196610236366004612b85565b61120d565b34801561024757600080fd5b50610196610256366004612c41565b61136f565b34801561026757600080fd5b50610196610276366004612cac565b61144a565b34801561028757600080fd5b5061029061150f565b60405161013893929190613c8c565b3480156102ab57600080fd5b506101966102ba366004612980565b61185f565b3480156102cb57600080fd5b506102d46118b5565b60405161013893929190613c4a565b3480156102ef57600080fd5b506101966102fe366004612c76565b611a74565b34801561030f57600080fd5b5061032361031e3660046129a6565b611b58565b604051610138959493929190613cd6565b34801561034057600080fd5b506101ed612164565b34801561035557600080fd5b50610196610364366004612a99565b6122c6565b34801561037557600080fd5b50610196610384366004612adc565b61245e565b34801561039557600080fd5b506101966103a4366004612c41565b612638565b600f54606090600090600160a060020a031633146103c657600080fd5b5060005b600160d060020a0319831660009081526004602052604090205481101561046457600160d060020a03198316600090815260046020526040902080548290811061041057fe5b90600052602060002090600391828204019190066009029054906101000a900460b860020a02828281518110151561044457fe5b600160b860020a03199092166020928302909101909101526001016103ca565b50919050565b606080606080600060606000606060008060008060008d93508d92506002600085600160e860020a031916600160e860020a03191681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b50505050509c50600090505b600160e860020a031984166000908152600260208190526040909120015481101561072857600160e860020a0319841660009081526002602081905260409091200180548290811061059e57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561062c5780601f106106015761010080835404028352916020019161062c565b820191906000526020600020905b81548152906001019060200180831161060f57829003601f168201915b50505050508c8281518110151561063f57fe5b6020908102909101810191909152600160d060020a03198416600090815260059091526040902060020180548290811061067557fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b50505050508b8281518110151561071657fe5b60209081029091010152600101610550565b600160d060020a0319831660009081526005602090815260408083205466010000000000009004600160a060020a031680845283835292819020600190810180548351600261010094831615949094026000190190911692909204601f810185900485028301850190935282825293955092918301828280156107ec5780601f106107c1576101008083540402835291602001916107ec565b820191906000526020600020905b8154815290600101906020018083116107cf57829003601f168201915b505050505099506008600084600160d060020a031916600160d060020a03191681526020019081526020016000206003015498506008600084600160d060020a031916600160d060020a031916815260200190815260200160002060010160009054906101000a9004600160a060020a031691506006600083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561091c5780601f106108f15761010080835404028352916020019161091c565b820191906000526020600020905b8154815290600101906020018083116108ff57829003601f168201915b505050505097506008600084600160d060020a031916600160d060020a0319168152602001908152602001600020600401549650600b60008f600160b860020a031916600160b860020a031916815260200190815260200160002060020160009054906101000a9004600160a060020a031691506009600083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4c5780601f10610a2157610100808354040283529160200191610a4c565b820191906000526020600020905b815481529060010190602001808311610a2f57829003601f168201915b50505050509550600b60008f600160b860020a031916600160b860020a0319168152602001908152602001600020600401549450505050509193959799909294969850565b336000908152600660205260409020600201541515610ae9577fd156dc9e38c2e6173a4862f6563ea573ab87269a917bdabe0a5d9d7fdb2b32e9336000604051610adc929190613915565b60405180910390a1610c33565b600160d060020a031982166000908152600560205260409020600101541515610b3e577fd156dc9e38c2e6173a4862f6563ea573ab87269a917bdabe0a5d9d7fdb2b32e9336000604051610adc929190613acd565b801515610b485750425b600160d060020a031982166000908152600860208181526040808420805465ffffffffffff19167a0100000000000000000000000000000000000000000000000000008804178082556005845294829020549390925279ffffffffffffffffffffffffffffffffffffffff00000000000019909316660100000000000092839004600160a060020a03169092029190911781556001808201805433600160a060020a03199091168117909155600390920184905591517fd156dc9e38c2e6173a4862f6563ea573ab87269a917bdabe0a5d9d7fdb2b32e992610c2a92916137b5565b60405180910390a15b5050565b336000908152602081905260408120600201541515610c7d57600080516020613f29833981519152336000604051610c709291906137e1565b60405180910390a1610dbf565b600160d060020a031982166000908152600560205260409020600101541515610cc057600080516020613f29833981519152336000604051610c7092919061380d565b5060005b6006811015610d3857818160068110610cd957fe5b1a60f860020a02600160f860020a0319168382600981101515610cf857fe5b1a60f860020a02600160f860020a031916141515610d3057600080516020613f29833981519152336000604051610c709291906138bd565b600101610cc4565b600160d060020a031982166000908152600460209081526040808320805460018082018355918552929093206003808404909101805468ffffffffffffffffff929094066009026101000a9182021990931660b860020a8804919091021790915551600080516020613f2983398151915291610db691339190613aa1565b60405180910390a15b505050565b3360009081526020819052604081206002015481901515610e1e577fb23107efcd4a03b0c166bccb64837204df67666dd3f6a92a687d81babf37fb44336000604051610e11929190613a49565b60405180910390a1610f9d565b600160e860020a031985166000908152600260205260409020600301541515610e4a5760009150610e4f565b600191505b600160e860020a031985166000908152600260209081526040909120805462ffffff191660e860020a88041781558551610e9192600190920191870190612715565b50600090505b8251811015610f08578281815181101515610eae57fe5b6020908102909101810151600160e860020a03198716600090815260029283905260409020909101805483908110610ee257fe5b906000526020600020019080519060200190610eff929190612715565b50600101610e97565b600160e860020a0319851660009081526002602052604090206001600390910155811515610f62577fb23107efcd4a03b0c166bccb64837204df67666dd3f6a92a687d81babf37fb44336001604051610e119291906139c5565b7fb23107efcd4a03b0c166bccb64837204df67666dd3f6a92a687d81babf37fb44336001604051610f949291906139f1565b60405180910390a15b5050505050565b600f546060908190600090600160a060020a03163314610fc357600080fd5b5060005b600754811015611107576007805482908110610fdf57fe5b6000918252602090912001548351600160a060020a039091169084908390811061100557fe5b600160a060020a03909216602092830290910190910152600780546006916000918490811061103057fe5b6000918252602080832090910154600160a060020a031683528281019390935260409182019020600190810180548351601f60026000199584161561010002959095019092169390930490810185900485028301850190935282825290929091908301828280156110e25780601f106110b7576101008083540402835291602001916110e2565b820191906000526020600020905b8154815290600101906020018083116110c557829003601f168201915b505050505082828151811015156110f557fe5b60209081029091010152600101610fc7565b509091565b600160b860020a031983166000908152600b6020526040902060030154600160a060020a0316331461116a577faab2a701489dfe9445e8df0a11e4e2a21b562b5da6568d8ceee124df14f6d7c3336000604051610c70929190613b7d565b811515611175574291505b600160b860020a031983166000908152600d6020908152604090912060028101805460b860020a870468ffffffffffffffffff199091161790558054600160a060020a031916331781556001810184905582516111da92600390920191840190612715565b507faab2a701489dfe9445e8df0a11e4e2a21b562b5da6568d8ceee124df14f6d7c3336001604051610db6929190613af9565b33600090815260096020526040812060030154151561124657600080516020613ee9833981519152336000604051610e119291906138e9565b600160a060020a0383166000908152600c6020526040902060030154151561128857600080516020613ee9833981519152336000604051610e11929190613a1d565b50600160d060020a031984166000908152600860205260409020600201548490600160a060020a031633146112d757600080516020613ee9833981519152336000604051610e11929190613b51565b8315156112e2574293505b600160b860020a031985166000908152600b602052604090819020805468ffffffffffffffffff191660b860020a8804178155600180820187905560028201805433600160a060020a03199182168117909255600384018054909116600160a060020a03891617905560049092018590559151600080516020613ee983398151915292610f94929161396d565b33600090815260208190526040812054600160a060020a031615156113965750600061139a565b5060015b336000818152602081815260409091208054600160a060020a031916909217825583516113cd9260010191850190612715565b50336000908152602081905260409020600160029091015580151561141b577f8d61f84d8015a8bc5d655672779571797f897ed10d3c4f75305db701ea94cb5333604051610adc9190613c06565b7f8d61f84d8015a8bc5d655672779571797f897ed10d3c4f75305db701ea94cb5333604051610c2a9190613ba9565b336000908152600c6020526040812054600160a060020a0316151561147157506000611475565b5060015b336000818152600c602052604090208054600160a060020a03191690911781556001808201859055600282018490556003909101558015156114e0577f9df22cde4061d380418e4e207ef95c22c561c7c58bb56a988919dca8e8b2094733604051610c709190613be7565b7f9df22cde4061d380418e4e207ef95c22c561c7c58bb56a988919dca8e8b2094733604051610db69190613ba9565b600f54606090819081906000908190600160a060020a0316331461153257600080fd5b600091505b60035482101561185857600380548390811061154f57fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02858381518110151561158357fe5b600160e860020a031990921660209283029091019091015260038054600291600091859081106115af57fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02600160e860020a031916600160e860020a03191681526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561168e5780601f106116635761010080835404028352916020019161168e565b820191906000526020600020905b81548152906001019060200180831161167157829003601f168201915b505050505084838151811015156116a157fe5b602090810290910101525060005b600260006003848154811015156116c257fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02600160e860020a031916600160e860020a03191681526020019081526020016000206002018054905081101561184d576002600060038481548110151561172b57fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02600160e860020a031916600160e860020a03191681526020019081526020016000206002018181548110151561178357fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156118115780601f106117e657610100808354040283529160200191611811565b820191906000526020600020905b8154815290600101906020018083116117f457829003601f168201915b5050505050838381518110151561182457fe5b906020019060200201518281518110151561183b57fe5b602090810290910101526001016116af565b600190910190611537565b5050909192565b600f8054600160a060020a031916600160a060020a0383161790556040517f5703c49920ca0d76a1c92ad02dc671ac59ec4564e3214f0c54926db43e198dbb906118aa903390613bc8565b60405180910390a150565b600f5460609081908190600090600160a060020a031633146118d657600080fd5b5060005b600a54811015611a6e57600a8054829081106118f257fe5b6000918252602090912001548451600160a060020a039091169085908390811061191857fe5b600160a060020a03909216602092830290910190910152600a80546009916000918490811061194357fe5b6000918252602080832090910154600160a060020a031683528281019390935260409182019020600190810180548351601f60026000199584161561010002959095019092169390930490810185900485028301850190935282825290929091908301828280156119f55780601f106119ca576101008083540402835291602001916119f5565b820191906000526020600020905b8154815290600101906020018083116119d857829003601f168201915b50505050508382815181101515611a0857fe5b60209081029091010152600a805460099160009184908110611a2657fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020600201548251839083908110611a5c57fe5b602090810290910101526001016118da565b50909192565b33600090815260096020526040812054600160a060020a03161515611a9b57506000611a9f565b5060015b3360008181526009602090815260409091208054600160a060020a03191690921782558451611ad49260010191860190612715565b50336000908152600960205260409020600281018390556001600390910155801515611b29577f836d55c39f69ec3edcbd65dfdd397491063b2f49844b9c70468094fa6d69328033604051610c709190613be7565b7f836d55c39f69ec3edcbd65dfdd397491063b2f49844b9c70468094fa6d69328033604051610db69190613ba9565b60608060608060606000806000806000806000600f60009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141515611ba057600080fd5b5060005b600e54811015611efb578c60001a60f860020a02600160f860020a031916600e82815481101515611bd157fe5b60009182526020822060038083049091015491066009026101000a900460b860020a02901a60f860020a02600160f860020a031916148015611c6a57508c60011a60f860020a02600160f860020a031916600e82815481101515611c3157fe5b6000918252602090912060038083049091015491066009026101000a900460b860020a0260011a60f860020a02600160f860020a031916145b8015611ccd57508c60021a60f860020a02600160f860020a031916600e82815481101515611c9457fe5b6000918252602090912060038083049091015491066009026101000a900460b860020a0260021a60f860020a02600160f860020a031916145b15611ef35786600e82815481101515611ce257fe5b60009182526020808320600380840490910154855460018101875595855291842081860401805468ffffffffffffffffff96839006600990810261010090810a9889021990921660b860020a9490960602900a9092048102049390930217909155600e80548892600d92909185908110611d5857fe5b90600052602060002090600391828204019190066009029054906101000a900460b860020a02600160b860020a031916600160b860020a03191681526020019081526020016000206003019080600181540180825580915050906001820390600052602060002001600090919290919091509080546001816001161561010002031660029004611de9929190612793565b505082600d6000600e84815481101515611dff57fe5b6000918252602080832060038084049091015492066009026101000a90910460b860020a02600160b860020a031916835282810193909352604090910181206001908101548454918201855593825291812090910191909155600e8054600d92919084908110611e6b57fe5b6000918252602080832060038084049091015492066009026101000a90910460b860020a02600160b860020a0319168352828101939093526040918201812054600160a060020a0316808252600c84529181206002810154895460018082018c558b855286852090910191909155908101548854918201895588835293909120019190915591505b600101611ba4565b868686868684805480602002602001604051908101604052809291908181526020018280548015611f7b57602002820191906000526020600020906000905b82829054906101000a900460b860020a02600160b860020a03191681526020019060090190602082600801049283019260010382029150808411611f3a5790505b5050505050945083805480602002602001604051908101604052809291908181526020016000905b8282101561204e5760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561203a5780601f1061200f5761010080835404028352916020019161203a565b820191906000526020600020905b81548152906001019060200180831161201d57829003601f168201915b505050505081526020019060010190611fa3565b5050505093508280548060200260200160405190810160405280929190818152602001828054801561209f57602002820191906000526020600020905b81548152602001906001019080831161208b575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156120f157602002820191906000526020600020905b8154815260200190600101908083116120dd575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561214357602002820191906000526020600020905b81548152602001906001019080831161212f575b505050505090509b509b509b509b509b505050505050505091939590929450565b600f546060908190600090600160a060020a0316331461218357600080fd5b5060005b60015481101561110757600180548290811061219f57fe5b6000918252602090912001548351600160a060020a03909116908490839081106121c557fe5b600160a060020a03909216602092830290910190910152600180546000918291849081106121ef57fe5b6000918252602080832090910154600160a060020a031683528281019390935260409182019020600190810180548351601f60026000199584161561010002959095019092169390930490810185900485028301850190935282825290929091908301828280156122a15780601f10612276576101008083540402835291602001916122a1565b820191906000526020600020905b81548152906001019060200180831161228457829003601f168201915b505050505082828151811015156122b457fe5b60209081029091010152600101612187565b3360009081526006602052604090206002015415156122ff57600080516020613f09833981519152336000604051610c70929190613999565b600160d060020a03198316600090815260086020526040902060030154158061234d5750600160d060020a03198316600090815260086020526040902060010154600160a060020a03163314155b1561237257600080516020613f09833981519152336000604051610c70929190613a75565b600160d060020a03198316600090815260086020526040902060040154156123b457600080516020613f09833981519152336000604051610c70929190613865565b600160a060020a03811660009081526009602052604090206003015415156123f657600080516020613f09833981519152336000604051610c70929190613941565b811515612401574291505b600160d060020a0319831660009081526008602052604090819020600481018490556002018054600160a060020a031916600160a060020a03841617905551600080516020613f0983398151915290610db6903390600190613891565b33600090815260208190526040812060020154819015156124ab577fcd6492bfa0acf0ab9b77b50b67482bb23aa3f1283c1d3672ea243305baec1660336000604051610e11929190613789565b8315156124b6574293505b600160d060020a0319851660009081526005602052604090206001015415156124e257600091506124e7565b600191505b50600160d060020a031984166000908152600560205260408120805465ffffffffffff19167a01000000000000000000000000000000000000000000000000000087041779ffffffffffffffffffffffffffffffffffffffff0000000000001916336601000000000000021781556001018490555b82518110156125cd57828181518110151561257357fe5b6020908102909101810151600160d060020a031987166000908152600590925260409091206002018054839081106125a757fe5b9060005260206000200190805190602001906125c4929190612715565b5060010161255c565b811515612606577fcd6492bfa0acf0ab9b77b50b67482bb23aa3f1283c1d3672ea243305baec1660336001604051610e11929190613839565b7fcd6492bfa0acf0ab9b77b50b67482bb23aa3f1283c1d3672ea243305baec1660336001604051610f94929190613b25565b33600090815260066020526040812054600160a060020a0316151561265f57506000612663565b5060015b3360008181526006602090815260409091208054600160a060020a031916909217825583516126989260010191850190612715565b5033600090815260066020526040902060016002909101558015156126e6577f5746aa2026b6cce5ab18d1dd958f355630be00088fe639c090e6c252cc720c3533604051610adc9190613be7565b7f5746aa2026b6cce5ab18d1dd958f355630be00088fe639c090e6c252cc720c3533604051610c2a9190613ba9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061275657805160ff1916838001178555612783565b82800160010185558215612783579182015b82811115612783578251825591602001919060010190612768565b5061278f929150612808565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106127cc5780548555612783565b8280016001018555821561278357600052602060002091601f016020900482015b828111156127835782548255916001019190600101906127ed565b61282291905b8082111561278f576000815560010161280e565b90565b60006128318235613e6a565b9392505050565b6000601f8201831361284957600080fd5b813561285c61285782613e17565b613df0565b81815260209384019390925082018360005b8381101561289a57813586016128848882612925565b845250602092830192919091019060010161286e565b5050505092915050565b6000601f820183136128b557600080fd5b81356128c361285782613e17565b81815260209384019390925082018360005b8381101561289a57813586016128eb8882612925565b84525060209283019291909101906001016128d5565b60006128318235613e7b565b60006128318235613e95565b60006128318235613e88565b6000601f8201831361293657600080fd5b813561294461285782613e38565b9150808252602083016020830185838301111561296057600080fd5b61296b838284613ea2565b50505092915050565b60006128318235612822565b60006020828403121561299257600080fd5b600061299e8484612825565b949350505050565b6000602082840312156129b857600080fd5b600061299e8484612901565b6000806000606084860312156129d957600080fd5b60006129e58686612901565b935050602084013567ffffffffffffffff811115612a0257600080fd5b612a0e86828701612925565b925050604084013567ffffffffffffffff811115612a2b57600080fd5b612a37868287016128a4565b9150509250925092565b600060208284031215612a5357600080fd5b600061299e848461290d565b60008060408385031215612a7257600080fd5b6000612a7e858561290d565b9250506020612a8f85828601612974565b9150509250929050565b600080600060608486031215612aae57600080fd5b6000612aba868661290d565b9350506020612acb86828701612974565b9250506040612a3786828701612825565b600080600060608486031215612af157600080fd5b6000612afd868661290d565b9350506020612b0e86828701612974565b925050604084013567ffffffffffffffff811115612b2b57600080fd5b612a3786828701612838565b600060208284031215612b4957600080fd5b600061299e8484612919565b60008060408385031215612b6857600080fd5b6000612b748585612919565b9250506020612a8f8582860161290d565b60008060008060808587031215612b9b57600080fd5b6000612ba78787612919565b9450506020612bb887828801612974565b9350506040612bc987828801612825565b9250506060612bda87828801612974565b91505092959194509250565b600080600060608486031215612bfb57600080fd5b6000612c078686612919565b9350506020612c1886828701612974565b925050604084013567ffffffffffffffff811115612c3557600080fd5b612a3786828701612925565b600060208284031215612c5357600080fd5b813567ffffffffffffffff811115612c6a57600080fd5b61299e84828501612925565b60008060408385031215612c8957600080fd5b823567ffffffffffffffff811115612ca057600080fd5b612a7e85828601612925565b60008060408385031215612cbf57600080fd5b6000612a7e8585612974565b612cd481613e6a565b82525050565b6000612ce582613e66565b808452602084019350612cf783613e60565b60005b82811015612d2757612d0d868351612ccb565b612d1682613e60565b602096909601959150600101612cfa565b5093949350505050565b6000612d3c82613e66565b80845260208401935083602082028501612d5585613e60565b60005b84811015612d8c578383038852612d70838351612ee8565b9250612d7b82613e60565b602098909801979150600101612d58565b50909695505050505050565b6000612da382613e66565b808452602084019350612db583613e60565b60005b82811015612d2757612dcb868351612f99565b612dd482613e60565b602096909601959150600101612db8565b6000612df082613e66565b808452602084019350612e0283613e60565b60005b82811015612d2757612e18868351612fa2565b612e2182613e60565b602096909601959150600101612e05565b6000612e3d82613e66565b80845260208401935083602082028501612e5685613e60565b60005b84811015612d8c578383038852612e71838351612fab565b9250612e7c82613e60565b602098909801979150600101612e59565b6000612e9882613e66565b80845260208401935083602082028501612eb185613e60565b60005b84811015612d8c578383038852612ecc838351612fab565b9250612ed782613e60565b602098909801979150600101612eb4565b6000612ef382613e66565b80845260208401935083602082028501612f0c85613e60565b60005b84811015612d8c578383038852612f27838351612fab565b9250612f3282613e60565b602098909801979150600101612f0f565b6000612f4e82613e66565b808452602084019350612f6083613e60565b60005b82811015612d2757612f76868351613780565b612f7f82613e60565b602096909601959150600101612f63565b612cd481613e76565b612cd481613e7b565b612cd481613e88565b6000612fb682613e66565b808452612fca816020860160208601613eae565b612fd381613ede565b9093016020019392505050565b602d81527fe5bd93e5898de794a8e688b7e697a0e4b88ae4bca0e88dafe59381e7949fe4ba60208201527fa7e4bfa1e681afe69d83e9999000000000000000000000000000000000000000604082015260600190565b600c81527fe58f96e8b4a7e68890e58a9f0000000000000000000000000000000000000000602082015260400190565b602781527fe5bd93e5898de794a8e688b7e697a0e58c85e8a385e4bfa1e681afe4b88ae4bc60208201527fa0e69d83e9999000000000000000000000000000000000000000000000000000604082015260600190565b601881527fe794a8e688b7e4bfa1e681afe4bfaee694b9e68890e58a9f0000000000000000602082015260400190565b602781527fe5a4a7e58c85e4bfa1e681afe4b88de5ad98e59ca8efbc8ce8afb7e9878de69660208201527fb0e8be93e585a500000000000000000000000000000000000000000000000000604082015260600190565b601e81527fe88dafe59381e7949fe4baa7e4bfa1e681afe4b88ae4bca0e68890e58a9f0000602082015260400190565b602481527fe88dafe59381e5b7b2e98081e8bebeefbc8ce697a0e6b395e9878de5a48de98060208201527f81e8bebe00000000000000000000000000000000000000000000000000000000604082015260600190565b600c81527fe98081e8bebee68890e58a9f0000000000000000000000000000000000000000602082015260400190565b602481527fe4bfa1e681afe8be93e585a5e69c89e8afafefbc8ce8afb7e9878de696b0e8be60208201527f93e585a500000000000000000000000000000000000000000000000000000000604082015260600190565b601881527fe79b91e7aea1e983a8e997a8e8aebee7bdaee68890e58a9f0000000000000000602082015260400190565b602781527fe5bd93e5898de794a8e688b7e697a0e99bb6e594aee4bfa1e681afe4b88ae4bc60208201527fa0e69d83e9999000000000000000000000000000000000000000000000000000604082015260600190565b602781527fe5bd93e5898de794a8e688b7e697a0e4b88ae4bca0e58f96e8b4a7e4bfa1e68160208201527fafe69d83e9999000000000000000000000000000000000000000000000000000604082015260600190565b602a81527fe99480e594aee5b9b3e58fb0e4b88de5ad98e59ca8efbc8ce4b88ae4bca0e4bf60208201527fa1e681afe5a4b1e8b4a500000000000000000000000000000000000000000000604082015260600190565b601881527fe99bb6e594aee4bfa1e681afe4b88ae4bca0e68890e58a9f0000000000000000602082015260400190565b601281527fe6b3a8e5868ce794a8e688b7e68890e58a9f0000000000000000000000000000602082015260400190565b601b81527fe5bd93e5898de794a8e688b7e697a0e98081e8bebee69d83e999900000000000602082015260400190565b601581527fe696b0e9858de696b9e4b88ae4bca0e68890e58a9f0000000000000000000000602082015260400190565b601e81527fe9858de696b9e5b7b2e5ad98e59ca8efbc8ce4bfaee694b9e68890e58a9f0000602082015260400190565b603381527fe6b688e8b4b9e88085e4bfa1e681afe4b88de5ad98e59ca8efbc8ce99bb6e59460208201527faee4bfa1e681afe4b88ae4bca0e5a4b1e8b4a500000000000000000000000000604082015260600190565b602181527fe5bd93e5898de794a8e688b7e697a0e4b88ae4bca0e9858de696b9e69d83e99960208201527f9000000000000000000000000000000000000000000000000000000000000000604082015260600190565b605181527fe58f96e8b4a7e4bfa1e681afe99499e8afafefbc88e5a4a7e58c85e69caae58f60208201527f96e8b4a7e68896e8bf90e8be93e4bc81e4b89ae59cb0e59d80e99499e8afafef60408201527fbc89efbc8ce98081e8bebee5a4b1e8b4a5000000000000000000000000000000606082015260800190565b601881527fe58c85e8a385e4bfa1e681afe4b88ae4bca0e68890e58a9f0000000000000000602082015260400190565b602a81527fe88dafe59381e5a4a7e58c85e4bfa1e681afe4b88de5ad98e59ca8efbc8ce69760208201527fa0e6b395e58f96e8b4a700000000000000000000000000000000000000000000604082015260600190565b601281527fe4bfa1e681afe58f8de9a688e68890e58a9f0000000000000000000000000000602082015260400190565b602a81527fe88dafe59381e4bfa1e681afe5b7b2e5ad98e59ca8efbc8ce4bfa1e681afe69b60208201527fb4e696b0e68890e58a9f00000000000000000000000000000000000000000000604082015260600190565b602d81527fe88dafe59381e4bfa1e681afe99499e8afafefbc8ce99bb6e594aee4bfa1e68160208201527fafe4b88ae4bca0e5a4b1e8b4a500000000000000000000000000000000000000604082015260600190565b602d81527fe99bb6e594aee4bfa1e681afe99499e8afafefbc8ce58f8de9a688e4bfa1e68160208201527fafe4b88ae4bca0e5a4b1e8b4a500000000000000000000000000000000000000604082015260600190565b601281527fe794a8e688b7e6b3a8e5868ce68890e58a9f0000000000000000000000000000602082015260400190565b612cd481612822565b606081016137978285612ccb565b6137a46020830184612f90565b818103604083015261299e81612fe0565b606081016137c38285612ccb565b6137d06020830184612f90565b818103604083015261299e81613036565b606081016137ef8285612ccb565b6137fc6020830184612f90565b818103604083015261299e81613066565b6060810161381b8285612ccb565b6138286020830184612f90565b818103604083015261299e816130ec565b606081016138478285612ccb565b6138546020830184612f90565b818103604083015261299e81613142565b606081016138738285612ccb565b6138806020830184612f90565b818103604083015261299e81613172565b6060810161389f8285612ccb565b6138ac6020830184612f90565b818103604083015261299e816131c8565b606081016138cb8285612ccb565b6138d86020830184612f90565b818103604083015261299e816131f8565b606081016138f78285612ccb565b6139046020830184612f90565b818103604083015261299e8161327e565b606081016139238285612ccb565b6139306020830184612f90565b818103604083015261299e816132d4565b6060810161394f8285612ccb565b61395c6020830184612f90565b818103604083015261299e8161332a565b6060810161397b8285612ccb565b6139886020830184612f90565b818103604083015261299e81613380565b606081016139a78285612ccb565b6139b46020830184612f90565b818103604083015261299e816133e0565b606081016139d38285612ccb565b6139e06020830184612f90565b818103604083015261299e81613410565b606081016139ff8285612ccb565b613a0c6020830184612f90565b818103604083015261299e81613440565b60608101613a2b8285612ccb565b613a386020830184612f90565b818103604083015261299e81613470565b60608101613a578285612ccb565b613a646020830184612f90565b818103604083015261299e816134c6565b60608101613a838285612ccb565b613a906020830184612f90565b818103604083015261299e8161351c565b60608101613aaf8285612ccb565b613abc6020830184612f90565b818103604083015261299e81613598565b60608101613adb8285612ccb565b613ae86020830184612f90565b818103604083015261299e816135c8565b60608101613b078285612ccb565b613b146020830184612f90565b818103604083015261299e8161361e565b60608101613b338285612ccb565b613b406020830184612f90565b818103604083015261299e8161364e565b60608101613b5f8285612ccb565b613b6c6020830184612f90565b818103604083015261299e816136a4565b60608101613b8b8285612ccb565b613b986020830184612f90565b818103604083015261299e816136fa565b60408101613bb78284612ccb565b8181036020830152612831816130bc565b60408101613bd68284612ccb565b81810360208301526128318161324e565b60408101613bf58284612ccb565b8181036020830152612831816133b0565b60408101613c148284612ccb565b818103602083015261283181613750565b60408082528101613c368185612cda565b9050818103602083015261299e8184612e8d565b60608082528101613c5b8186612cda565b90508181036020830152613c6f8185612e8d565b90508181036040830152613c838184612f43565b95945050505050565b60608082528101613c9d8186612d98565b90508181036020830152613cb18185612e8d565b90508181036040830152613c838184612d31565b602080825281016128318184612de5565b60a08082528101613ce78188612de5565b90508181036020830152613cfb8187612e8d565b90508181036040830152613d0f8186612f43565b90508181036060830152613d238185612f43565b90508181036080830152613d378184612f43565b979650505050505050565b6101208082528101613d54818c612fab565b90508181036020830152613d68818b612e8d565b90508181036040830152613d7c818a612e32565b90508181036060830152613d908189612fab565b9050613d9f6080830188613780565b81810360a0830152613db18187612fab565b9050613dc060c0830186613780565b81810360e0830152613dd28185612fab565b9050613de2610100830184613780565b9a9950505050505050505050565b60405181810167ffffffffffffffff81118282101715613e0f57600080fd5b604052919050565b600067ffffffffffffffff821115613e2e57600080fd5b5060209081020190565b600067ffffffffffffffff821115613e4f57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b600160a060020a031690565b151590565b600160e860020a03191690565b600160b860020a03191690565b600160d060020a03191690565b82818337506000910152565b60005b83811015613ec9578181015183820152602001613eb1565b83811115613ed8576000848401525b50505050565b601f01601f1916905600ace5772e69c84ff1991781222b7d1ec8786e1b5c2d9402f3a05e7d50cd28d68bd09dc7ea68a0c7daceeb1e462a4cbb94e4d2426c084cdb70a90787b5c7470b77b9ed22041e016db14768f807c15b0339719e13911da48e643021140af7dc0049a265627a7a723058201f61235e82433898d90a21f05ada44937c9d6bcb4a8d8b4a1e8c8ae4564d990c6c6578706572696d656e74616cf50037";

    public static final String FUNC_GETPACKINFO = "getPackInfo";

    public static final String FUNC_TRACE = "trace";

    public static final String FUNC_PICK = "pick";

    public static final String FUNC_PACK = "pack";

    public static final String FUNC_SETFORMULATION = "setFormulation";

    public static final String FUNC_GETTRANSPORTERS = "getTransporters";

    public static final String FUNC_FEEDBACK = "feedBack";

    public static final String FUNC_SETSELLINFO = "setSellInfo";

    public static final String FUNC_SETMANUFACTURER = "setManufacturer";

    public static final String FUNC_SETCONSUMER = "setConsumer";

    public static final String FUNC_GETFORMULATIONS = "getFormulations";

    public static final String FUNC_SETAUTHORITY = "setAuthority";

    public static final String FUNC_GETSELLERS = "getSellers";

    public static final String FUNC_SETSELLER = "setSeller";

    public static final String FUNC_GETFEEDBACKS = "getFeedBacks";

    public static final String FUNC_GETMANUFACTURERS = "getManufacturers";

    public static final String FUNC_DROP = "drop";

    public static final String FUNC_SETBOXINFO = "setBoxInfo";

    public static final String FUNC_SETTRANSPORTER = "setTransporter";

    public static final Event NEWAUTHORITY_EVENT = new Event("newAuthority", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWMANUFACTURER_EVENT = new Event("newManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWTRANSPORTER_EVENT = new Event("newTransporter", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWSELLER_EVENT = new Event("newSeller", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWCONSUMER_EVENT = new Event("newConsumer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWPACKINFO_EVENT = new Event("newPackInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWFORMULATION_EVENT = new Event("newFormulation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWBOXINFO_EVENT = new Event("newBoxInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWPICKINFO_EVENT = new Event("newPickInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWDROPINFO_EVENT = new Event("newDropInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWSELLINFO_EVENT = new Event("newSellInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWFEEDBACK_EVENT = new Event("newFeedBack", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected MedicineSourceTracing(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MedicineSourceTracing(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MedicineSourceTracing(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MedicineSourceTracing(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<List> getPackInfo(byte[] boxID) {
        final Function function = new Function(FUNC_GETPACKINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes9>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple9<String, List<String>, List<byte[]>, String, BigInteger, String, BigInteger, String, BigInteger>> trace(byte[] packageID) {
        final Function function = new Function(FUNC_TRACE, 
                Arrays.<Type>asList(new Bytes9(packageID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple9<String, List<String>, List<byte[]>, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple9<String, List<String>, List<byte[]>, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple9<String, List<String>, List<byte[]>, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, List<String>, List<byte[]>, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> pick(byte[] boxID, BigInteger time) {
        final Function function = new Function(
                FUNC_PICK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pack(byte[] packageID, byte[] boxID) {
        final Function function = new Function(
                FUNC_PACK, 
                Arrays.<Type>asList(new Bytes9(packageID),
                new org.web3j.abi.datatypes.generated.Bytes6(boxID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setFormulation(byte[] drugID, String drugName, List<String> material) {
        final Function function = new Function(
                FUNC_SETFORMULATION, 
                Arrays.<Type>asList(new Bytes3(drugID),
                new Utf8String(drugName),
                new DynamicArray<Utf8String>(
                        org.web3j.abi.Utils.typeMap(material, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<String>>> getTransporters() {
        final Function function = new Function(FUNC_GETTRANSPORTERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<String>>>(
                new Callable<Tuple2<List<String>, List<String>>>() {
                    @Override
                    public Tuple2<List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> feedBack(byte[] packageID, BigInteger time, String information) {
        final Function function = new Function(
                FUNC_FEEDBACK, 
                Arrays.<Type>asList(new Bytes9(packageID),
                new Uint256(time),
                new Utf8String(information)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSellInfo(byte[] packageID, BigInteger time, String consumerAddr, BigInteger price) {
        final Function function = new Function(
                FUNC_SETSELLINFO, 
                Arrays.<Type>asList(new Bytes9(packageID),
                new Uint256(time),
                new Address(consumerAddr),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setManufacturer(String manufacturerName) {
        final Function function = new Function(
                FUNC_SETMANUFACTURER, 
                Arrays.<Type>asList(new Utf8String(manufacturerName)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setConsumer(BigInteger gender, BigInteger age) {
        final Function function = new Function(
                FUNC_SETCONSUMER, 
                Arrays.<Type>asList(new Uint256(gender),
                new Uint256(age)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<List<byte[]>, List<String>, List<List<String>>>> getFormulations() {
        final Function function = new Function(FUNC_GETFORMULATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes3>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<DynamicArray<Utf8String>>>() {}));
        return new RemoteCall<Tuple3<List<byte[]>, List<String>, List<List<String>>>>(
                new Callable<Tuple3<List<byte[]>, List<String>, List<List<String>>>>() {
                    @Override
                    public Tuple3<List<byte[]>, List<String>, List<List<String>>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<byte[]>, List<String>, List<List<String>>>(
                                convertToNative((List<Bytes3>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<DynamicArray<Utf8String>>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setAuthority(String authorityAddr) {
        final Function function = new Function(
                FUNC_SETAUTHORITY, 
                Arrays.<Type>asList(new Address(authorityAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<List<String>, List<String>, List<BigInteger>>> getSellers() {
        final Function function = new Function(FUNC_GETSELLERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple3<List<String>, List<String>, List<BigInteger>>>(
                new Callable<Tuple3<List<String>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setSeller(String sellerName, BigInteger sellerType) {
        final Function function = new Function(
                FUNC_SETSELLER, 
                Arrays.<Type>asList(new Utf8String(sellerName),
                new Uint256(sellerType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<List<byte[]>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getFeedBacks(byte[] drugID) {
        final Function function = new Function(FUNC_GETFEEDBACKS, 
                Arrays.<Type>asList(new Bytes3(drugID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes9>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple5<List<byte[]>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple5<List<byte[]>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<byte[]>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<byte[]>, List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Bytes9>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple2<List<String>, List<String>>> getManufacturers() {
        final Function function = new Function(FUNC_GETMANUFACTURERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<String>>>(
                new Callable<Tuple2<List<String>, List<String>>>() {
                    @Override
                    public Tuple2<List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> drop(byte[] boxID, BigInteger time, String sellerAddr) {
        final Function function = new Function(
                FUNC_DROP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new Uint256(time),
                new Address(sellerAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBoxInfo(byte[] boxID, BigInteger time, List<byte[]> materialID) {
        final Function function = new Function(
                FUNC_SETBOXINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new Uint256(time),
                new DynamicArray<DynamicBytes>(
                        org.web3j.abi.Utils.typeMap(materialID, DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTransporter(String transporterName) {
        final Function function = new Function(
                FUNC_SETTRANSPORTER, 
                Arrays.<Type>asList(new Utf8String(transporterName)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<NewAuthorityEventResponse> getNewAuthorityEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWAUTHORITY_EVENT, transactionReceipt);
        ArrayList<NewAuthorityEventResponse> responses = new ArrayList<NewAuthorityEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewAuthorityEventResponse typedResponse = new NewAuthorityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewAuthorityEventResponse> newAuthorityEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewAuthorityEventResponse>() {
            @Override
            public NewAuthorityEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWAUTHORITY_EVENT, log);
                NewAuthorityEventResponse typedResponse = new NewAuthorityEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewAuthorityEventResponse> newAuthorityEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWAUTHORITY_EVENT));
        return newAuthorityEventObservable(filter);
    }

    public List<NewManufacturerEventResponse> getNewManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<NewManufacturerEventResponse> responses = new ArrayList<NewManufacturerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewManufacturerEventResponse typedResponse = new NewManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewManufacturerEventResponse> newManufacturerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewManufacturerEventResponse>() {
            @Override
            public NewManufacturerEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMANUFACTURER_EVENT, log);
                NewManufacturerEventResponse typedResponse = new NewManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewManufacturerEventResponse> newManufacturerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMANUFACTURER_EVENT));
        return newManufacturerEventObservable(filter);
    }

    public List<NewTransporterEventResponse> getNewTransporterEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTRANSPORTER_EVENT, transactionReceipt);
        ArrayList<NewTransporterEventResponse> responses = new ArrayList<NewTransporterEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewTransporterEventResponse typedResponse = new NewTransporterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTransporterEventResponse> newTransporterEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTransporterEventResponse>() {
            @Override
            public NewTransporterEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWTRANSPORTER_EVENT, log);
                NewTransporterEventResponse typedResponse = new NewTransporterEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewTransporterEventResponse> newTransporterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWTRANSPORTER_EVENT));
        return newTransporterEventObservable(filter);
    }

    public List<NewSellerEventResponse> getNewSellerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSELLER_EVENT, transactionReceipt);
        ArrayList<NewSellerEventResponse> responses = new ArrayList<NewSellerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewSellerEventResponse typedResponse = new NewSellerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSellerEventResponse> newSellerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSellerEventResponse>() {
            @Override
            public NewSellerEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSELLER_EVENT, log);
                NewSellerEventResponse typedResponse = new NewSellerEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewSellerEventResponse> newSellerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSELLER_EVENT));
        return newSellerEventObservable(filter);
    }

    public List<NewConsumerEventResponse> getNewConsumerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCONSUMER_EVENT, transactionReceipt);
        ArrayList<NewConsumerEventResponse> responses = new ArrayList<NewConsumerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewConsumerEventResponse typedResponse = new NewConsumerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewConsumerEventResponse> newConsumerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewConsumerEventResponse>() {
            @Override
            public NewConsumerEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWCONSUMER_EVENT, log);
                NewConsumerEventResponse typedResponse = new NewConsumerEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewConsumerEventResponse> newConsumerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWCONSUMER_EVENT));
        return newConsumerEventObservable(filter);
    }

    public List<NewPackInfoEventResponse> getNewPackInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPACKINFO_EVENT, transactionReceipt);
        ArrayList<NewPackInfoEventResponse> responses = new ArrayList<NewPackInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewPackInfoEventResponse typedResponse = new NewPackInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewPackInfoEventResponse> newPackInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewPackInfoEventResponse>() {
            @Override
            public NewPackInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPACKINFO_EVENT, log);
                NewPackInfoEventResponse typedResponse = new NewPackInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewPackInfoEventResponse> newPackInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPACKINFO_EVENT));
        return newPackInfoEventObservable(filter);
    }

    public List<NewFormulationEventResponse> getNewFormulationEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWFORMULATION_EVENT, transactionReceipt);
        ArrayList<NewFormulationEventResponse> responses = new ArrayList<NewFormulationEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewFormulationEventResponse typedResponse = new NewFormulationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewFormulationEventResponse> newFormulationEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewFormulationEventResponse>() {
            @Override
            public NewFormulationEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWFORMULATION_EVENT, log);
                NewFormulationEventResponse typedResponse = new NewFormulationEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewFormulationEventResponse> newFormulationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWFORMULATION_EVENT));
        return newFormulationEventObservable(filter);
    }

    public List<NewBoxInfoEventResponse> getNewBoxInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBOXINFO_EVENT, transactionReceipt);
        ArrayList<NewBoxInfoEventResponse> responses = new ArrayList<NewBoxInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewBoxInfoEventResponse typedResponse = new NewBoxInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewBoxInfoEventResponse> newBoxInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewBoxInfoEventResponse>() {
            @Override
            public NewBoxInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBOXINFO_EVENT, log);
                NewBoxInfoEventResponse typedResponse = new NewBoxInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewBoxInfoEventResponse> newBoxInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBOXINFO_EVENT));
        return newBoxInfoEventObservable(filter);
    }

    public List<NewPickInfoEventResponse> getNewPickInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPICKINFO_EVENT, transactionReceipt);
        ArrayList<NewPickInfoEventResponse> responses = new ArrayList<NewPickInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewPickInfoEventResponse typedResponse = new NewPickInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewPickInfoEventResponse> newPickInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewPickInfoEventResponse>() {
            @Override
            public NewPickInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPICKINFO_EVENT, log);
                NewPickInfoEventResponse typedResponse = new NewPickInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewPickInfoEventResponse> newPickInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPICKINFO_EVENT));
        return newPickInfoEventObservable(filter);
    }

    public List<NewDropInfoEventResponse> getNewDropInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDROPINFO_EVENT, transactionReceipt);
        ArrayList<NewDropInfoEventResponse> responses = new ArrayList<NewDropInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewDropInfoEventResponse typedResponse = new NewDropInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewDropInfoEventResponse> newDropInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewDropInfoEventResponse>() {
            @Override
            public NewDropInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDROPINFO_EVENT, log);
                NewDropInfoEventResponse typedResponse = new NewDropInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewDropInfoEventResponse> newDropInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDROPINFO_EVENT));
        return newDropInfoEventObservable(filter);
    }

    public List<NewSellInfoEventResponse> getNewSellInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSELLINFO_EVENT, transactionReceipt);
        ArrayList<NewSellInfoEventResponse> responses = new ArrayList<NewSellInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewSellInfoEventResponse typedResponse = new NewSellInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSellInfoEventResponse> newSellInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSellInfoEventResponse>() {
            @Override
            public NewSellInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSELLINFO_EVENT, log);
                NewSellInfoEventResponse typedResponse = new NewSellInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewSellInfoEventResponse> newSellInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSELLINFO_EVENT));
        return newSellInfoEventObservable(filter);
    }

    public List<NewFeedBackEventResponse> getNewFeedBackEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWFEEDBACK_EVENT, transactionReceipt);
        ArrayList<NewFeedBackEventResponse> responses = new ArrayList<NewFeedBackEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewFeedBackEventResponse typedResponse = new NewFeedBackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewFeedBackEventResponse> newFeedBackEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewFeedBackEventResponse>() {
            @Override
            public NewFeedBackEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWFEEDBACK_EVENT, log);
                NewFeedBackEventResponse typedResponse = new NewFeedBackEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewFeedBackEventResponse> newFeedBackEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWFEEDBACK_EVENT));
        return newFeedBackEventObservable(filter);
    }

    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MedicineSourceTracing(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MedicineSourceTracing(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MedicineSourceTracing(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MedicineSourceTracing(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class NewAuthorityEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewManufacturerEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewTransporterEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewSellerEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewConsumerEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewPackInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewFormulationEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewBoxInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewPickInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewDropInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewSellInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewFeedBackEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }
}
