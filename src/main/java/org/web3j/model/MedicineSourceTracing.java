package org.web3j.model;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes3;
import org.web3j.abi.datatypes.generated.Bytes9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class MedicineSourceTracing extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5061341e806100206000396000f3006080604052600436106101065763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663045a6090811461010b578063122e13301461021e5780631325666f146104c7578063194f1023146104ee578063407599511461051d57806346bf91971461058757806347ddec6e146105bb5780635946718c146106045780636044a1301461065d57806374b242351461067857806376e94a46146106e25780637a9e5e4b146107915780637dbda554146107b257806397a808731461085c578063a5cf3766146108b7578063bf33afa514610984578063c6698ed7146109b5578063cfb7786514610a5b578063fe9db22114610a73575b600080fd5b34801561011757600080fd5b50610123600435610acc565b60408051600160e860020a0319861681528215156060820152608060208083018281528751928401929092528651929391929184019160a085019188019080838360005b8381101561017f578181015183820152602001610167565b50505050905090810190601f1680156101ac5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156101df5781810151838201526020016101c7565b50505050905090810190601f16801561020c5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561022a57600080fd5b50610240600160b860020a031960043516610d32565b6040518080602001806020018060200180602001898152602001806020018881526020018060200187810387528f818151815260200191508051906020019080838360005b8381101561029d578181015183820152602001610285565b50505050905090810190601f1680156102ca5780820380516001836020036101000a031916815260200191505b5087810386528e818151815260200191508051906020019080838360005b838110156103005781810151838201526020016102e8565b50505050905090810190601f16801561032d5780820380516001836020036101000a031916815260200191505b5087810385528d5181528d516020918201918f019080838360005b83811015610360578181015183820152602001610348565b50505050905090810190601f16801561038d5780820380516001836020036101000a031916815260200191505b5087810384528c5181528c516020918201918e019080838360005b838110156103c05781810151838201526020016103a8565b50505050905090810190601f1680156103ed5780820380516001836020036101000a031916815260200191505b5087810383528a5181528a516020918201918c019080838360005b83811015610420578181015183820152602001610408565b50505050905090810190601f16801561044d5780820380516001836020036101000a031916815260200191505b5087810382528851815288516020918201918a019080838360005b83811015610480578181015183820152602001610468565b50505050905090810190601f1680156104ad5780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b3480156104d357600080fd5b506104ec600160d060020a03196004351660243561127b565b005b3480156104fa57600080fd5b506104ec600160b860020a031960043516600160d060020a031960243516611514565b34801561052957600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526104ec948235600160b860020a0319169460248035953695946064949201919081908401838280828437509497506118679650505050505050565b34801561059357600080fd5b506104ec600160b860020a031960043516602435600160a060020a0360443516606435611a78565b3480156105c757600080fd5b506105e0600160d060020a031960043516602435611d58565b60408051600160b860020a0319909316835290151560208301528051918290030190f35b34801561061057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104ec943694929360249392840191908190840183828082843750949750611df59650505050505050565b34801561066957600080fd5b506104ec600435602435611f76565b34801561068457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526104ec948235600160d060020a0319169460248035953695946064949201919081908401838280828437509497506120a19650505050505050565b3480156106ee57600080fd5b506106fa60043561232d565b60408051600160a060020a0386168152908101839052811515606082015260806020808301828152865192840192909252855160a084019187019080838360005b8381101561075357818101518382015260200161073b565b50505050905090810190601f1680156107805780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561079d57600080fd5b506104ec600160a060020a0360043516612498565b3480156107be57600080fd5b506107ca60043561251d565b60408051600160a060020a038516815282151591810191909152606060208083018281528551928401929092528451608084019186019080838360005b8381101561081f578181015183820152602001610807565b50505050905090810190601f16801561084c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561086857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104ec943694929360249392840191908190840183828082843750949750509335945061264a9350505050565b3480156108c357600080fd5b506108dc600160e860020a0319600435166024356127d6565b60408051600160b860020a031988168152908101859052606081018490526080810183905281151560a082015260c06020808301828152885192840192909252875160e084019189019080838360005b8381101561094457818101518382015260200161092c565b50505050905090810190601f1680156109715780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561099057600080fd5b506104ec600160d060020a031960043516602435600160a060020a0360443516612ab5565b3480156109c157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526104ec958335600160e860020a03191695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612e2e9650505050505050565b348015610a6757600080fd5b506107ca6004356130ed565b348015610a7f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104ec9436949293602493928401919081908401838280828437509497506131539650505050505050565b600f5460009060609081908390600160a060020a03163314610aed57600080fd5b6003548510610afe57506000610d2b565b6003805486908110610b0c57fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02935060026000600387815481101515610b4757fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02600160e860020a031916600160e860020a03191681526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c265780601f10610bfb57610100808354040283529160200191610c26565b820191906000526020600020905b815481529060010190602001808311610c0957829003601f168201915b5050505050925060026000600387815481101515610c4057fe5b90600052602060002090600a91828204019190066003029054906101000a900460e860020a02600160e860020a031916600160e860020a03191681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d1f5780601f10610cf457610100808354040283529160200191610d1f565b820191906000526020600020905b815481529060010190602001808311610d0257829003601f168201915b50505050509150600190505b9193509193565b606080606080600060606000606060008060008b92508b91506002600084600160e860020a031916600160e860020a03191681526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e095780601f10610dde57610100808354040283529160200191610e09565b820191906000526020600020905b815481529060010190602001808311610dec57829003601f168201915b50505050509a506002600084600160e860020a031916600160e860020a03191681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ece5780601f10610ea357610100808354040283529160200191610ece565b820191906000526020600020905b815481529060010190602001808311610eb157829003601f168201915b50505050600160d060020a031984166000908152600560209081526040918290206002908101805484516001821615610100026000190190911692909204601f8101849004840283018401909452838252949e50939250830182828015610f765780601f10610f4b57610100808354040283529160200191610f76565b820191906000526020600020905b815481529060010190602001808311610f5957829003601f168201915b50505050600160d060020a0319841660009081526005602090815260408083205466010000000000009004600160a060020a031680845283835292819020600190810180548351600261010094831615949094026000190190911692909204601f8101859004850283018501909352828252959e50929550919392508301828280156110435780601f1061101857610100808354040283529160200191611043565b820191906000526020600020905b81548152906001019060200180831161102657829003601f168201915b50505050600160d060020a0319841660009081526008602090815260408083206003810154600191820154600160a060020a03168086526006855294839020820180548451600261010095831615959095026000190190911693909304601f8101869004860284018601909452838352969e509c50929550919392508301828280156111105780601f106110e557610100808354040283529160200191611110565b820191906000526020600020905b8154815290600101906020018083116110f357829003601f168201915b50505050509550600860008379ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600401549450600b60008d600160b860020a031916600160b860020a031916815260200190815260200160002060020160009054906101000a9004600160a060020a031690506009600082600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112665780601f1061123b57610100808354040283529160200191611266565b820191906000526020600020905b81548152906001019060200180831161124957829003601f168201915b50505050509350505050919395975091939597565b33600090815260066020526040902060020154151561132d57604080513381526000602082015260608183018190526027908201527fe5bd93e5898de794a8e688b7e697a0e4b88ae4bca0e58f96e8b4a7e4bfa1e68160808201527fafe69d83e999900000000000000000000000000000000000000000000000000060a082015290517fd156dc9e38c2e6173a4862f6563ea573ab87269a917bdabe0a5d9d7fdb2b32e99181900360c00190a1611510565b600160d060020a0319821660009081526005602052604090206001015415156113e95760408051338152600060208201526060818301819052602a908201527fe88dafe59381e5a4a7e58c85e4bfa1e681afe4b88de5ad98e59ca8efbc8ce69760808201527fa0e6b395e58f96e8b4a70000000000000000000000000000000000000000000060a082015290517fd156dc9e38c2e6173a4862f6563ea573ab87269a917bdabe0a5d9d7fdb2b32e99181900360c00190a1611510565b8015156113f35750425b600160d060020a031982166000908152600860208181526040808420805465ffffffffffff19167a01000000000000000000000000000000000000000000000000000088041780825560058452948290205493835279ffffffffffffffffffffffffffffffffffffffff00000000000019909416660100000000000093849004600160a060020a03169093029290921783556001808401805433600160a060020a0319909116811790915560039094018590558251938452908301526060828201819052600c908301527fe58f96e8b4a7e68890e58a9f00000000000000000000000000000000000000006080830152517fd156dc9e38c2e6173a4862f6563ea573ab87269a917bdabe0a5d9d7fdb2b32e99160a0908290030190a15b5050565b3360009081526020819052604081206002015415156115b457604080513381526000602082015260608183018190526027908201527fe5bd93e5898de794a8e688b7e697a0e58c85e8a385e4bfa1e681afe4b88ae4bc60808201527fa0e69d83e999900000000000000000000000000000000000000000000000000060a082015290516000805160206133b38339815191529181900360c00190a1611862565b600160d060020a03198216600090815260056020526040902060010154151561165e57604080513381526000602082015260608183018190526027908201527fe5a4a7e58c85e4bfa1e681afe4b88de5ad98e59ca8efbc8ce8afb7e9878de69660808201527fb0e8be93e585a50000000000000000000000000000000000000000000000000060a082015290516000805160206133b38339815191529181900360c00190a1611862565b5060005b60068110156117a55781816006811061167757fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683826009811015156116ca57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561179d57604080513381526000602082015260608183018190526024908201527fe4bfa1e681afe8be93e585a5e69c89e8afafefbc8ce8afb7e9878de696b0e8be60808201527f93e585a50000000000000000000000000000000000000000000000000000000060a082015290516000805160206133b38339815191529181900360c00190a1611862565b600101611662565b600160d060020a031982166000908152600460209081526040808320805460018082018355918552938390206003808604909101805468ffffffffffffffffff929096066009026101000a9182021990951660b860020a8904919091021790935580513381529182019290925260608183018190526018908201527fe58c85e8a385e4bfa1e681afe4b88ae4bca0e68890e58a9f0000000000000000608082015290516000805160206133b38339815191529160a0908290030190a15b505050565b600160b860020a031983166000908152600b6020526040812060030154600160a060020a0316331461192c5760408051338152600060208201526060818301819052602d908201527fe99bb6e594aee4bfa1e681afe99499e8afafefbc8ce58f8de9a688e4bfa1e68160808201527fafe4b88ae4bca0e5a4b1e8b4a50000000000000000000000000000000000000060a082015290517faab2a701489dfe9445e8df0a11e4e2a21b562b5da6568d8ceee124df14f6d7c39181900360c00190a1611a72565b821515611937574292505b600160b860020a031984166000908152600d6020908152604090912060028101805460b860020a880468ffffffffffffffffff199091161790558054600160a060020a0319163317815560018101859055835161199c926003909201918501906132d7565b5050600160e860020a031983166000908152600e60209081526040808320805460018082018355918552938390206003808604909101805468ffffffffffffffffff929096066009026101000a9182021990951660b860020a8904919091021790935580513381529182019290925260608183018190526012908201527fe4bfa1e681afe58f8de9a688e68890e58a9f00000000000000000000000000006080820152905184917faab2a701489dfe9445e8df0a11e4e2a21b562b5da6568d8ceee124df14f6d7c39160a0918190039190910190a15b50505050565b336000908152600960205260408120600301541515611b1857604080513381526000602082015260608183018190526027908201527fe5bd93e5898de794a8e688b7e697a0e99bb6e594aee4bfa1e681afe4b88ae4bc60808201527fa0e69d83e999900000000000000000000000000000000000000000000000000060a082015290516000805160206133738339815191529181900360c00190a1611d51565b600160a060020a0383166000908152600c60205260409020600301541515611bc157604080513381526000602082015260608183018190526033908201527fe6b688e8b4b9e88085e4bfa1e681afe4b88de5ad98e59ca8efbc8ce99bb6e59460808201527faee4bfa1e681afe4b88ae4bca0e5a4b1e8b4a50000000000000000000000000060a082015290516000805160206133738339815191529181900360c00190a1611d51565b50600160d060020a031984166000908152600860205260409020600201548490600160a060020a03163314611c775760408051338152600060208201526060818301819052602d908201527fe88dafe59381e4bfa1e681afe99499e8afafefbc8ce99bb6e594aee4bfa1e68160808201527fafe4b88ae4bca0e5a4b1e8b4a50000000000000000000000000000000000000060a082015290516000805160206133738339815191529181900360c00190a1611d51565b831515611c82574293505b600160b860020a031985166000908152600b6020908152604091829020805468ffffffffffffffffff191660b860020a8904178155600180820188905560028201805433600160a060020a03199182168117909255600384018054909116600160a060020a038a16179055600490920186905583519182529181019190915260608183018190526018908201527fe99bb6e594aee4bfa1e681afe4b88ae4bca0e68890e58a9f0000000000000000608082015290516000805160206133738339815191529160a0908290030190a15b5050505050565b600f546000908190600160a060020a03163314611d7457600080fd5b600160d060020a031984166000908152600460205260409020548310611d9c57506000611dee565b600160d060020a031984166000908152600460205260409020805484908110611dc157fe5b90600052602060002090600391828204019190066009029054906101000a900460b860020a029150600190505b9250929050565b33600090815260208190526040812054600160a060020a03161515611e1c57506000611e20565b5060015b336000818152602081815260409091208054600160a060020a03191690921782558351611e5392600101918501906132d7565b503360009081526020819052604090206001600290910155801515611f1e5760408051338152602081018290526012818301527fe794a8e688b7e6b3a8e5868ce68890e58a9f0000000000000000000000000000606082015290517f8d61f84d8015a8bc5d655672779571797f897ed10d3c4f75305db701ea94cb539181900360800190a16001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054600160a060020a03191633179055611510565b60408051338152602081018290526018818301526000805160206133d3833981519152606082015290517f8d61f84d8015a8bc5d655672779571797f897ed10d3c4f75305db701ea94cb539181900360800190a15050565b336000908152600c6020526040812054600160a060020a03161515611f9d57506000611fa1565b5060015b336000818152600c602052604090208054600160a060020a03191690911781556001808201859055600282018490556003909101558015156120485760408051338152602081018290526012818301527fe6b3a8e5868ce794a8e688b7e68890e58a9f0000000000000000000000000000606082015290517f9df22cde4061d380418e4e207ef95c22c561c7c58bb56a988919dca8e8b209479181900360800190a1611862565b60408051338152602081018290526018818301526000805160206133d3833981519152606082015290517f9df22cde4061d380418e4e207ef95c22c561c7c58bb56a988919dca8e8b209479181900360800190a1505050565b3360009081526020819052604081206002015415156121535760408051338152600060208201526060818301819052602d908201527fe5bd93e5898de794a8e688b7e697a0e4b88ae4bca0e88dafe59381e7949fe4ba60808201527fa7e4bfa1e681afe69d83e999900000000000000000000000000000000000000060a082015290517fcd6492bfa0acf0ab9b77b50b67482bb23aa3f1283c1d3672ea243305baec16609181900360c00190a1611a72565b82151561215e574292505b600160d060020a0319841660009081526005602052604090206001015415156121895750600061218d565b5060015b600160d060020a031984166000908152600560209081526040909120805465ffffffffffff19167a01000000000000000000000000000000000000000000000000000087041779ffffffffffffffffffffffffffffffffffffffff000000000000191633660100000000000002178155600181018590558351612218926002909201918501906132d7565b508015156122935760408051338152600160208201526060818301819052601e908201527fe88dafe59381e7949fe4baa7e4bfa1e681afe4b88ae4bca0e68890e58a9f0000608082015290517fcd6492bfa0acf0ab9b77b50b67482bb23aa3f1283c1d3672ea243305baec16609181900360a00190a1611a72565b60408051338152600160208201526060818301819052602a908201527fe88dafe59381e4bfa1e681afe5b7b2e5ad98e59ca8efbc8ce4bfa1e681afe69b60808201527fb4e696b0e68890e58a9f0000000000000000000000000000000000000000000060a082015290517fcd6492bfa0acf0ab9b77b50b67482bb23aa3f1283c1d3672ea243305baec16609181900360c00190a150505050565b600f5460009060609082908190600160a060020a0316331461234e57600080fd5b600a54851061235f57506000610d2b565b600a80548690811061236d57fe5b6000918252602082200154600a8054600160a060020a039092169650600992918890811061239757fe5b6000918252602080832090910154600160a060020a031683528281019390935260409182019020600190810180548351601f60026000199584161561010002959095019092169390930490810185900485028301850190935282825290929091908301828280156124495780601f1061241e57610100808354040283529160200191612449565b820191906000526020600020905b81548152906001019060200180831161242c57829003601f168201915b5050505050925060096000600a8781548110151561246357fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020600201549150600190509193509193565b600f8054600160a060020a031916600160a060020a03831617905560408051338152602081018290526018818301527fe79b91e7aea1e983a8e997a8e8aebee7bdaee68890e58a9f0000000000000000606082015290517f5703c49920ca0d76a1c92ad02dc671ac59ec4564e3214f0c54926db43e198dbb916080908290030190a150565b600f546000906060908290600160a060020a0316331461253c57600080fd5b600754841061254d57506000612643565b600780548590811061255b57fe5b600091825260208220015460078054600160a060020a039092169550600692918790811061258557fe5b6000918252602080832090910154600160a060020a031683528281019390935260409182019020600190810180548351601f60026000199584161561010002959095019092169390930490810185900485028301850190935282825290929091908301828280156126375780601f1061260c57610100808354040283529160200191612637565b820191906000526020600020905b81548152906001019060200180831161261a57829003601f168201915b50505050509150600190505b9193909250565b33600090815260096020526040812054600160a060020a0316151561267157506000612675565b5060015b3360008181526009602090815260409091208054600160a060020a031916909217825584516126aa92600101918601906132d7565b5033600090815260096020526040902060028101839055600160039091015580151561277d5760408051338152602081018290526012818301527fe6b3a8e5868ce794a8e688b7e68890e58a9f0000000000000000000000000000606082015290517f836d55c39f69ec3edcbd65dfdd397491063b2f49844b9c70468094fa6d6932809181900360800190a1600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018054600160a060020a03191633179055611862565b60408051338152602081018290526018818301526000805160206133d3833981519152606082015290517f836d55c39f69ec3edcbd65dfdd397491063b2f49844b9c70468094fa6d6932809181900360800190a1505050565b600f5460009060609082908190819081908190600160a060020a031633146127fd57600080fd5b600160e860020a031989166000908152600e602052604090205488106128265760009150612aaa565b600160e860020a031989166000908152600e6020526040902080548990811061284b57fe5b90600052602060002090600391828204019190066009029054906101000a900460b860020a029650600d6000600e60008c600160e860020a031916600160e860020a03191681526020019081526020016000208a8154811015156128ab57fe5b90600052602060002090600391828204019190066009029054906101000a900460b860020a02600160b860020a031916600160b860020a03191681526020019081526020016000206003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561298a5780601f1061295f5761010080835404028352916020019161298a565b820191906000526020600020905b81548152906001019060200180831161296d57829003601f168201915b505050600160e860020a03198c166000908152600e602052604081208054949a50600d9491935091508b9081106129bd57fe5b90600052602060002090600391828204019190066009029054906101000a900460b860020a02600160b860020a031916600160b860020a0319168152602001908152602001600020600101549250600d6000600e60008c600160e860020a031916600160e860020a03191681526020019081526020016000208a815481101515612a4357fe5b6000918252602080832060038084049091015492066009026101000a90910460b860020a02600160b860020a0319168352828101939093526040918201812054600160a060020a0316808252600c9093522060028101546001918201549097509550925090505b509295509295509295565b336000908152600660205260409020600201541515612b2f5760408051338152600060208201526060818301819052601b908201527fe5bd93e5898de794a8e688b7e697a0e98081e8bebee69d83e999900000000000608082015290516000805160206133938339815191529181900360a00190a1611862565b600160d060020a031983166000908152600860205260409020600301541580612b7d5750600160d060020a03198316600090815260086020526040902060010154600160a060020a03163314155b15612c2f57604080513381526000602082015260608183018190526051908201527fe58f96e8b4a7e4bfa1e681afe99499e8afafefbc88e5a4a7e58c85e69caae58f60808201527f96e8b4a7e68896e8bf90e8be93e4bc81e4b89ae59cb0e59d80e99499e8afafef60a08201527fbc89efbc8ce98081e8bebee5a4b1e8b4a500000000000000000000000000000060c082015290516000805160206133938339815191529181900360e00190a1611862565b600160d060020a0319831660009081526008602052604090206004015415612cd857604080513381526000602082015260608183018190526024908201527fe88dafe59381e5b7b2e98081e8bebeefbc8ce697a0e6b395e9878de5a48de98060808201527f81e8bebe0000000000000000000000000000000000000000000000000000000060a082015290516000805160206133938339815191529181900360c00190a1611862565b600160a060020a0381166000908152600960205260409020600301541515612d815760408051338152600060208201526060818301819052602a908201527fe99480e594aee5b9b3e58fb0e4b88de5ad98e59ca8efbc8ce4b88ae4bca0e4bf60808201527fa1e681afe5a4b1e8b4a50000000000000000000000000000000000000000000060a082015290516000805160206133938339815191529181900360c00190a1611862565b811515612d8c574291505b600160d060020a03198316600090815260086020908152604091829020600481018590556002018054600160a060020a031916600160a060020a03851617905581513381526001918101919091526060818301819052600c908201527fe98081e8bebee68890e58a9f0000000000000000000000000000000000000000608082015290516000805160206133938339815191529160a0908290030190a1505050565b336000908152602081905260408120600201541515612ee057604080513381526000602082015260608183018190526021908201527fe5bd93e5898de794a8e688b7e697a0e4b88ae4bca0e9858de696b9e69d83e99960808201527f900000000000000000000000000000000000000000000000000000000000000060a082015290517fb23107efcd4a03b0c166bccb64837204df67666dd3f6a92a687d81babf37fb449181900360c00190a1611a72565b600160e860020a031984166000908152600260205260409020600301541515612f0b57506000612f0f565b5060015b600160e860020a031984166000908152600260209081526040909120805462ffffff191660e860020a87041781558451612f51926001909201918601906132d7565b50600160e860020a0319841660009081526002602081815260409092208451612f82939190920191908501906132d7565b50600160e860020a031984166000908152600260205260409020600160039091015580151561307957604080513381526001602082015260608183018190526015908201527fe696b0e9858de696b9e4b88ae4bca0e68890e58a9f0000000000000000000000608082015290517fb23107efcd4a03b0c166bccb64837204df67666dd3f6a92a687d81babf37fb449181900360a00190a1600380546001810182556000829052600a8082047fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805460e860020a8904929093069093026101000a90810262ffffff90910219909116179055611a72565b60408051338152600160208201526060818301819052601e908201527fe9858de696b9e5b7b2e5ad98e59ca8efbc8ce4bfaee694b9e68890e58a9f0000608082015290517fb23107efcd4a03b0c166bccb64837204df67666dd3f6a92a687d81babf37fb449181900360a00190a150505050565b600f546000906060908290600160a060020a0316331461310c57600080fd5b600154841061311d57506000612643565b600180548590811061312b57fe5b600091825260208220015460018054600160a060020a03909216955082918790811061258557fe5b33600090815260066020526040812054600160a060020a0316151561317a5750600061317e565b5060015b3360008181526006602090815260409091208054600160a060020a031916909217825583516131b392600101918501906132d7565b50336000908152600660205260409020600160029091015580151561327f5760408051338152602081018290526012818301527fe6b3a8e5868ce794a8e688b7e68890e58a9f0000000000000000000000000000606082015290517f5746aa2026b6cce5ab18d1dd958f355630be00088fe639c090e6c252cc720c359181900360800190a1600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03191633179055611510565b60408051338152602081018290526018818301526000805160206133d3833981519152606082015290517f5746aa2026b6cce5ab18d1dd958f355630be00088fe639c090e6c252cc720c359181900360800190a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061331857805160ff1916838001178555613345565b82800160010185558215613345579182015b8281111561334557825182559160200191906001019061332a565b50613351929150613355565b5090565b61336f91905b80821115613351576000815560010161335b565b905600ace5772e69c84ff1991781222b7d1ec8786e1b5c2d9402f3a05e7d50cd28d68bd09dc7ea68a0c7daceeb1e462a4cbb94e4d2426c084cdb70a90787b5c7470b77b9ed22041e016db14768f807c15b0339719e13911da48e643021140af7dc0049e794a8e688b7e4bfa1e681afe4bfaee694b9e68890e58a9f0000000000000000a165627a7a72305820e12a3ccf66629e4f6f3fca56e85bdc9d99843a9be2f3bd0821c1f10563f84c2c0029";

    public static final String FUNC_GETFORMULATIONS = "getFormulations";

    public static final String FUNC_TRACE = "trace";

    public static final String FUNC_PICK = "pick";

    public static final String FUNC_PACK = "pack";

    public static final String FUNC_FEEDBACK = "feedBack";

    public static final String FUNC_SETSELLINFO = "setSellInfo";

    public static final String FUNC_GETPACKINFO = "getPackInfo";

    public static final String FUNC_SETMANUFACTURER = "setManufacturer";

    public static final String FUNC_SETCONSUMER = "setConsumer";

    public static final String FUNC_SETBOXINFO = "setBoxInfo";

    public static final String FUNC_GETSELLERS = "getSellers";

    public static final String FUNC_SETAUTHORITY = "setAuthority";

    public static final String FUNC_GETTRANSPORTERS = "getTransporters";

    public static final String FUNC_SETSELLER = "setSeller";

    public static final String FUNC_GETFEEDBACKS = "getFeedBacks";

    public static final String FUNC_DROP = "drop";

    public static final String FUNC_SETFORMULATION = "setFormulation";

    public static final String FUNC_GETMANUFACTURERS = "getManufacturers";

    public static final String FUNC_SETTRANSPORTER = "setTransporter";

    public static final Event NEWAUTHORITY_EVENT = new Event("newAuthority", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWMANUFACTURER_EVENT = new Event("newManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWTRANSPORTER_EVENT = new Event("newTransporter", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWSELLER_EVENT = new Event("newSeller", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWCONSUMER_EVENT = new Event("newConsumer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWPACKINFO_EVENT = new Event("newPackInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWFORMULATION_EVENT = new Event("newFormulation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWBOXINFO_EVENT = new Event("newBoxInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWPICKINFO_EVENT = new Event("newPickInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWDROPINFO_EVENT = new Event("newDropInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWSELLINFO_EVENT = new Event("newSellInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWFEEDBACK_EVENT = new Event("newFeedBack", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected MedicineSourceTracing(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MedicineSourceTracing(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MedicineSourceTracing(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MedicineSourceTracing(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple4<byte[], String, String, Boolean>> getFormulations(BigInteger index) {
        final Function function = new Function(FUNC_GETFORMULATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes3>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple4<byte[], String, String, Boolean>>(
                new Callable<Tuple4<byte[], String, String, Boolean>>() {
                    @Override
                    public Tuple4<byte[], String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<byte[], String, String, Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple8<String, String, byte[], String, BigInteger, String, BigInteger, String>> trace(byte[] packageID) {
        final Function function = new Function(FUNC_TRACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes9(packageID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, byte[], String, BigInteger, String, BigInteger, String>>(
                new Callable<Tuple8<String, String, byte[], String, BigInteger, String, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, byte[], String, BigInteger, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, byte[], String, BigInteger, String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> pick(byte[] boxID, BigInteger time) {
        final Function function = new Function(
                FUNC_PICK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new org.web3j.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pack(byte[] packageID, byte[] boxID) {
        final Function function = new Function(
                FUNC_PACK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes9(packageID), 
                new org.web3j.abi.datatypes.generated.Bytes6(boxID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> feedBack(byte[] packageID, BigInteger time, String information) {
        final Function function = new Function(
                FUNC_FEEDBACK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes9(packageID), 
                new org.web3j.abi.datatypes.generated.Uint256(time), 
                new org.web3j.abi.datatypes.Utf8String(information)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSellInfo(byte[] packageID, BigInteger time, String consumerAddr, BigInteger price) {
        final Function function = new Function(
                FUNC_SETSELLINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes9(packageID), 
                new org.web3j.abi.datatypes.generated.Uint256(time), 
                new org.web3j.abi.datatypes.Address(consumerAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<byte[], Boolean>> getPackInfo(byte[] boxID, BigInteger index) {
        final Function function = new Function(FUNC_GETPACKINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes9>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<byte[], Boolean>>(
                new Callable<Tuple2<byte[], Boolean>>() {
                    @Override
                    public Tuple2<byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setManufacturer(String manufacturerName) {
        final Function function = new Function(
                FUNC_SETMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(manufacturerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setConsumer(BigInteger gender, BigInteger age) {
        final Function function = new Function(
                FUNC_SETCONSUMER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gender), 
                new org.web3j.abi.datatypes.generated.Uint256(age)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBoxInfo(byte[] boxID, BigInteger time, byte[] materialID) {
        final Function function = new Function(
                FUNC_SETBOXINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new org.web3j.abi.datatypes.generated.Uint256(time), 
                new org.web3j.abi.datatypes.DynamicBytes(materialID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, String, BigInteger, Boolean>> getSellers(BigInteger index) {
        final Function function = new Function(FUNC_GETSELLERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, Boolean>>(
                new Callable<Tuple4<String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setAuthority(String authorityAddr) {
        final Function function = new Function(
                FUNC_SETAUTHORITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(authorityAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, Boolean>> getTransporters(BigInteger index) {
        final Function function = new Function(FUNC_GETTRANSPORTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple3<String, String, Boolean>>(
                new Callable<Tuple3<String, String, Boolean>>() {
                    @Override
                    public Tuple3<String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setSeller(String sellerName, BigInteger sellerType) {
        final Function function = new Function(
                FUNC_SETSELLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(sellerName), 
                new org.web3j.abi.datatypes.generated.Uint256(sellerType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<byte[], String, BigInteger, BigInteger, BigInteger, Boolean>> getFeedBacks(byte[] drugID, BigInteger index) {
        final Function function = new Function(FUNC_GETFEEDBACKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes3(drugID), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes9>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple6<byte[], String, BigInteger, BigInteger, BigInteger, Boolean>>(
                new Callable<Tuple6<byte[], String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple6<byte[], String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<byte[], String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> drop(byte[] boxID, BigInteger time, String sellerAddr) {
        final Function function = new Function(
                FUNC_DROP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes6(boxID), 
                new org.web3j.abi.datatypes.generated.Uint256(time), 
                new org.web3j.abi.datatypes.Address(sellerAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setFormulation(byte[] drugID, String drugName, String material) {
        final Function function = new Function(
                FUNC_SETFORMULATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes3(drugID), 
                new org.web3j.abi.datatypes.Utf8String(drugName), 
                new org.web3j.abi.datatypes.Utf8String(material)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, Boolean>> getManufacturers(BigInteger index) {
        final Function function = new Function(FUNC_GETMANUFACTURERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple3<String, String, Boolean>>(
                new Callable<Tuple3<String, String, Boolean>>() {
                    @Override
                    public Tuple3<String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setTransporter(String transporterName) {
        final Function function = new Function(
                FUNC_SETTRANSPORTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(transporterName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<NewAuthorityEventResponse> getNewAuthorityEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWAUTHORITY_EVENT, transactionReceipt);
        ArrayList<NewAuthorityEventResponse> responses = new ArrayList<NewAuthorityEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewAuthorityEventResponse typedResponse = new NewAuthorityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewAuthorityEventResponse> newAuthorityEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewAuthorityEventResponse>() {
            @Override
            public NewAuthorityEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWAUTHORITY_EVENT, log);
                NewAuthorityEventResponse typedResponse = new NewAuthorityEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewAuthorityEventResponse> newAuthorityEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWAUTHORITY_EVENT));
        return newAuthorityEventObservable(filter);
    }

    public List<NewManufacturerEventResponse> getNewManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<NewManufacturerEventResponse> responses = new ArrayList<NewManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewManufacturerEventResponse typedResponse = new NewManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewManufacturerEventResponse> newManufacturerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewManufacturerEventResponse>() {
            @Override
            public NewManufacturerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMANUFACTURER_EVENT, log);
                NewManufacturerEventResponse typedResponse = new NewManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewManufacturerEventResponse> newManufacturerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMANUFACTURER_EVENT));
        return newManufacturerEventObservable(filter);
    }

    public List<NewTransporterEventResponse> getNewTransporterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTRANSPORTER_EVENT, transactionReceipt);
        ArrayList<NewTransporterEventResponse> responses = new ArrayList<NewTransporterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTransporterEventResponse typedResponse = new NewTransporterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTransporterEventResponse> newTransporterEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTransporterEventResponse>() {
            @Override
            public NewTransporterEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWTRANSPORTER_EVENT, log);
                NewTransporterEventResponse typedResponse = new NewTransporterEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewTransporterEventResponse> newTransporterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWTRANSPORTER_EVENT));
        return newTransporterEventObservable(filter);
    }

    public List<NewSellerEventResponse> getNewSellerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSELLER_EVENT, transactionReceipt);
        ArrayList<NewSellerEventResponse> responses = new ArrayList<NewSellerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSellerEventResponse typedResponse = new NewSellerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSellerEventResponse> newSellerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSellerEventResponse>() {
            @Override
            public NewSellerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSELLER_EVENT, log);
                NewSellerEventResponse typedResponse = new NewSellerEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewSellerEventResponse> newSellerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSELLER_EVENT));
        return newSellerEventObservable(filter);
    }

    public List<NewConsumerEventResponse> getNewConsumerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCONSUMER_EVENT, transactionReceipt);
        ArrayList<NewConsumerEventResponse> responses = new ArrayList<NewConsumerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewConsumerEventResponse typedResponse = new NewConsumerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewConsumerEventResponse> newConsumerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewConsumerEventResponse>() {
            @Override
            public NewConsumerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWCONSUMER_EVENT, log);
                NewConsumerEventResponse typedResponse = new NewConsumerEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewConsumerEventResponse> newConsumerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWCONSUMER_EVENT));
        return newConsumerEventObservable(filter);
    }

    public List<NewPackInfoEventResponse> getNewPackInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPACKINFO_EVENT, transactionReceipt);
        ArrayList<NewPackInfoEventResponse> responses = new ArrayList<NewPackInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewPackInfoEventResponse typedResponse = new NewPackInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewPackInfoEventResponse> newPackInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewPackInfoEventResponse>() {
            @Override
            public NewPackInfoEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPACKINFO_EVENT, log);
                NewPackInfoEventResponse typedResponse = new NewPackInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewPackInfoEventResponse> newPackInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPACKINFO_EVENT));
        return newPackInfoEventObservable(filter);
    }

    public List<NewFormulationEventResponse> getNewFormulationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWFORMULATION_EVENT, transactionReceipt);
        ArrayList<NewFormulationEventResponse> responses = new ArrayList<NewFormulationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewFormulationEventResponse typedResponse = new NewFormulationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewFormulationEventResponse> newFormulationEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewFormulationEventResponse>() {
            @Override
            public NewFormulationEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWFORMULATION_EVENT, log);
                NewFormulationEventResponse typedResponse = new NewFormulationEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewFormulationEventResponse> newFormulationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWFORMULATION_EVENT));
        return newFormulationEventObservable(filter);
    }

    public List<NewBoxInfoEventResponse> getNewBoxInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBOXINFO_EVENT, transactionReceipt);
        ArrayList<NewBoxInfoEventResponse> responses = new ArrayList<NewBoxInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBoxInfoEventResponse typedResponse = new NewBoxInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewBoxInfoEventResponse> newBoxInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewBoxInfoEventResponse>() {
            @Override
            public NewBoxInfoEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBOXINFO_EVENT, log);
                NewBoxInfoEventResponse typedResponse = new NewBoxInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewBoxInfoEventResponse> newBoxInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBOXINFO_EVENT));
        return newBoxInfoEventObservable(filter);
    }

    public List<NewPickInfoEventResponse> getNewPickInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPICKINFO_EVENT, transactionReceipt);
        ArrayList<NewPickInfoEventResponse> responses = new ArrayList<NewPickInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewPickInfoEventResponse typedResponse = new NewPickInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewPickInfoEventResponse> newPickInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewPickInfoEventResponse>() {
            @Override
            public NewPickInfoEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPICKINFO_EVENT, log);
                NewPickInfoEventResponse typedResponse = new NewPickInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewPickInfoEventResponse> newPickInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPICKINFO_EVENT));
        return newPickInfoEventObservable(filter);
    }

    public List<NewDropInfoEventResponse> getNewDropInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDROPINFO_EVENT, transactionReceipt);
        ArrayList<NewDropInfoEventResponse> responses = new ArrayList<NewDropInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewDropInfoEventResponse typedResponse = new NewDropInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewDropInfoEventResponse> newDropInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewDropInfoEventResponse>() {
            @Override
            public NewDropInfoEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDROPINFO_EVENT, log);
                NewDropInfoEventResponse typedResponse = new NewDropInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewDropInfoEventResponse> newDropInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDROPINFO_EVENT));
        return newDropInfoEventObservable(filter);
    }

    public List<NewSellInfoEventResponse> getNewSellInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSELLINFO_EVENT, transactionReceipt);
        ArrayList<NewSellInfoEventResponse> responses = new ArrayList<NewSellInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSellInfoEventResponse typedResponse = new NewSellInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSellInfoEventResponse> newSellInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSellInfoEventResponse>() {
            @Override
            public NewSellInfoEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSELLINFO_EVENT, log);
                NewSellInfoEventResponse typedResponse = new NewSellInfoEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewSellInfoEventResponse> newSellInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSELLINFO_EVENT));
        return newSellInfoEventObservable(filter);
    }

    public List<NewFeedBackEventResponse> getNewFeedBackEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWFEEDBACK_EVENT, transactionReceipt);
        ArrayList<NewFeedBackEventResponse> responses = new ArrayList<NewFeedBackEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewFeedBackEventResponse typedResponse = new NewFeedBackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewFeedBackEventResponse> newFeedBackEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewFeedBackEventResponse>() {
            @Override
            public NewFeedBackEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWFEEDBACK_EVENT, log);
                NewFeedBackEventResponse typedResponse = new NewFeedBackEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewFeedBackEventResponse> newFeedBackEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWFEEDBACK_EVENT));
        return newFeedBackEventObservable(filter);
    }

    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MedicineSourceTracing> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MedicineSourceTracing.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MedicineSourceTracing(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MedicineSourceTracing(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MedicineSourceTracing(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MedicineSourceTracing load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MedicineSourceTracing(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class NewAuthorityEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewManufacturerEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewTransporterEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewSellerEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewConsumerEventResponse {
        public Log log;

        public String sender;

        public String message;
    }

    public static class NewPackInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewFormulationEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewBoxInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewPickInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewDropInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewSellInfoEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }

    public static class NewFeedBackEventResponse {
        public Log log;

        public String sender;

        public Boolean isSuccess;

        public String message;
    }
}
